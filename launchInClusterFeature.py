from __future__ import division
import os
import sys
import paramiko
import time
import glob

populationSize = 1024
numberOfIslands = [8,16,32,64,128]
disjoint = ["none"]
dimension = [3600]
problems = ["DATASETS"]
numJobs = 10
runtime = "14400000"

def calculateExtrachunks(numIslands):
    extrac = (0.2*numIslands-1)/2
    return int(round(extrac))


baseFile = "baseFileIsland.params"
baseServerFileName = "baseServer.params"

serverPort = "8999"

#cluster
serverIp = "compute-0-1"
jdk = "java"
launchDir = "/home/pgarcia/ECJ/classes"
#COMMENT localhost BELOW!
islandIdHeader = "isla"



#evorq
#serverIp = "localhost"
#jdk = "/home/pgarcia/jdk1.8.0_45/bin/java"
#launchDir = "/home/pgarcia/NetBeansProjects/ECJ/build/classes"
#UNCOMMENT hostname = "localhost" BELOW!!!!

def generateServerFile(serverfilename, numIsls):
    f = open(baseServerFileName)
    try:
        lines = f.readlines()
        lines = [l for l in lines]
        f1 = open(serverfilename, "w")
        try:
            f1.writelines(lines)
            f1.write("exch.server-addr = "+serverIp+"\n")
            f1.write("exch.server-port = "+serverPort+"\n")
            f1.write("exch.num-islands = "+`numIsls`+"\n");
            f1.write("\n") 
            for i in range(0,numIsls):
                f1.write("exch.island."+`i`+".id = "+islandIdHeader+`i`+"\n");
                f1.write("exch.island."+`i`+".num-mig = "+`numIsls-1`+"\n");
                otherIsland = 0
                for o in range(0,numIsls-1):
                    if(o == i):
                        otherIsland = otherIsland+1
                    f1.write("exch.island."+`i`+".mig."+`o`+" = "+islandIdHeader+`otherIsland`+"\n");
                    otherIsland = otherIsland+1
                f1.write("\n");
        finally:
            f1.close()
    finally:
        f.close()
                

def killJavas():
    for c in range(0,17):
        hostname = "compute-0-"+`c`
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname)
        print("Killing Java in "+hostname)
        ssh.exec_command("killall java")
        
        

#iId starts in 0!
def runIslandFile(runfile, iId):
    computeId = (iId)%16+1
    hostname = "compute-0-"+`computeId`
    #hostname = "localhost"
    print("Island "+`iId`+" trying to connect to "+hostname)    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname)
    print("CONNECTED TO "+hostname)
    command = "cd "+launchDir+";"+jdk+" -cp \"lib/*:.\" ec.Evolve -file "+runfile;
    print("Executing command: "+command)
    
    ssh.exec_command(command)
    
filesL = []
for ni in numberOfIslands:
    serverFileName = "server"+`ni`+"_.params"
    generateServerFile(serverFileName,ni)
    for d in disjoint:
        for dim in dimension:
            for p in problems:
                for j in range(0,numJobs):
                    #filesToReduce = "job."+`j`+"."+`ni`+"_"+d+"_"+`dim`+"_*.stats"
                    for islId in range(0,ni):
                        fileheader = "job."+`j`+"."+`ni`+"_"+d+"_"+`dim`+"_"+p+"_id_"+`islId`
                        runfile = fileheader+"_.params"
                        subpopsize = populationSize//ni
                        mutationProb = 1/dim
                        chunkSize = dim//ni
                        if d == "true":
                            mutationProb = 1/chunkSize
                        if d == "false":
                            mutationProb = 1/(chunkSize*3)
                        f= open(baseFile)
                        try:
                            lines = f.readlines()
                            lines = [l for l in lines]
                            f1= open(runfile, "w")
                            try:
                                extrachunks = calculateExtrachunks(ni)
                                print "for "+str(ni)+" the extrachunks are "+str(extrachunks)
                                f1.writelines(lines)
                                f1.write("#AUTOGENERATED STUFF \n")
                                f1.write("eval.problem.type = "+p+"\n");
                                f1.write("pop.subpop.0.size ="+`subpopsize`+"\n")
                                f1.write("pop.subpop.0.species.genome-size = "+`dim`+"\n");
                                f1.write("pop.subpop.0.species.mutation-prob = "+`mutationProb`+"\n");
                                f1.write("pop.subpop.0.species.pipe.disjoint = "+d+"\n");
                                f1.write("pop.subpop.0.species.pipe.source.0.disjoint = "+d+"\n");
                                f1.write("pop.subpop.0.species.pipe.extra_chunks = "+str(extrachunks)+"\n");
                                f1.write("pop.subpop.0.species.pipe.source.0.extra_chunks = "+str(extrachunks)+"\n");
                                #f1.write("pop.subpop.0.species.min-gene = 0\n");	
                                #f1.write("pop.subpop.0.species.max-gene = 1\n"); 
                                #if dim == 2048:
                                #    runtime = "100000"
                                #else:
                                #    runtime = "25000"
                                f1.write("eval.runtime = "+runtime+"\n");
                                f1.write("hpmoon.num-islands = "+`ni`+"\n")
                                f1.write("hpmoon.island-id = "+`islId`+"\n")
                                statsfile = fileheader+".stats"
                                frontfile = fileheader+".front"
                                f1.write("stat.front = "+frontfile+"\n")
                                f1.write("stat.file  = "+statsfile+"\n")
                                filesL.append(statsfile)
                                f1.write("seed.0 = 123"+`islId`+"\n")
                                f1.write("exch.id = isla"+`islId`+"\n")
                                port = 10000+islId
                                f1.write("exch.client-port = "+`port`+"\n")
                                f1.write("exch.server-addr = "+serverIp+"\n")
                                f1.write("exch.server-port = "+serverPort+"\n")
                            finally:
                                f1.close()
                        finally:
                            f.close()
                        print("RUNNING ISLAND FILE "+runfile)
                        runIslandFile(runfile,islId)

                    #os.system(jdk+" ec.Evolve -file "+runfile)
                    print("RUNNING SERVER: "+serverFileName)
                    os.system(jdk+" es.ugr.hpmoon.IslandRandomExchange -file "+serverFileName)
                    time.sleep(5)
                    print("SERVER CLOSED.")
                    #for file in glob.glob(filesToReduce):
                    #    print("Cleaning "+file)
                    #    os.system("LASTDATA=$(tail -n 2  "+file+") ; echo \"$LASTDATA\" > "+file)
                    time.sleep(5)
                    killJavas()
                    time.sleep(10)
                    print("Javas Killed\n")
                    
                    
